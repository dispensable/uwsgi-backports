The default uWSGI daemon
========================

The special uWSGI instance runned automatically by init.d script, without need
to manually create any configuration file, is called '<default daemon>'.

You could control specifically this instance by passing commands to init.d script
with suffix '-default'. For example:

    /etc/init.d/@@uwsgi_binary@@ restart-default

For setting options of '<default daemon>' or for disabling it, look into
/etc/default/@@uwsgi_binary@@.

Service files of default uWSGI daemon are located on:
  * UNIX socket | /var/run/uwsgi/default/@@uwsgi_binary@@.socket
  * pidfile     | /var/run/uwsgi/default/@@uwsgi_binary@@.pid

Automatic starting of additional instances of uWSGI
===================================================

init.d script automatically starts one instance of @@uwsgi_binary@@ for each
XML configuration file found in /etc/uwsgi/@@uwsgi_binary@@/.

This XML file must have '.xml' extension and, at least, following content:

    <uwsgi></uwsgi>

Example of more realistic configuration file:

    <uwsgi>
      <uid>1002</uid>
      <gid>1002</gid>
      <socket>/tmp/uwsgi.1002.sock</socket>
    </uwsgi>

For list of options passed by default to each started instance see
/etc/default/@@uwsgi_binary@@.

Controling additional instances of uWSGI
========================================

You could control these instances by executing

    /etc/init.d/@@uwsgi_binary@@ <command> <confname> <confname> ...

where:
  * <command> is one of 'start', 'stop' etc.
  * <confname> is the name of configuration file (without extension)

For example, this is how instance for /etc/uwsgi/@@uwsgi_binary@@/hello.xml is
started:

    /etc/init.d/@@uwsgi_binary@@ start hello

Changing of owner, group and rights for UNIX socket and pidfile
===============================================================

After starting of additional uWSGI instance init.d script tries to chown and/or
chmod:
  * pidfile                    | chown root:root   | chmod 644
  * UNIX socket                |                   | chmod o-rwx
  * directory with these files | chown <uid>:<gid> | chmod 755

Directory with pidfile and socket is located after name of configuration file:

    /var/run/uwsgi/@@uwsgi_binary@@/<confname>

init.d script tries to parse XML configuration file for values of <uid> or
<gid> tag. If this tag didn't found, init.d tries to parse DAEMON_OPTS for
'--uid' or '--gid' option. If even this fails, then directory will be chowned
to root:root.

For value of DAEMON_OPTS see /etc/default/@@uwsgi_binary@@

Status of executing init.d commands for specific instance
=========================================================

In init.d script output:
  * <confname>   -- command was executed without problems
  * <confname>!  -- command is failed (or executed with some problems)
  * <confname>?  -- configuration file for this instance isn't found
                    and this instance is ignored
  * (<confname>) -- instance is already in needed state

Let's see by example:

    /etc/init.d/@@uwsgi_binary@@ start ario wrogn googl moogl

Output:

    <...> -> (ario) wrogn? googl moogl!

It means that:
  * 'ario' instance was already runned before executing 'start' command
  * configuration file for 'wrogn' (i.e. file 'wrogn.xml') wasn't found
  * 'googl' is started without problems
  * starting 'moogl' is failed

Return value of init.d script is the number of instances with '!' mark.

init.d status command
=====================

'status' command can be executed:
  * without arguments -- it shows status of '<default daemon>' instance
  * with one argument -- it shows status of instance with given '<confname>'
