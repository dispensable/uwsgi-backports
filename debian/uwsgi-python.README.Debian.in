Contents:
  1. Automatic starting of instances of uWSGI
  2. Owner, group and permissions of UNIX socket and pidfile
  3. Commands recognized by init.d script
  4. Controling specific instances of uWSGI
  5. Status of executing init.d command for specific instance

Automatic starting of instances of uWSGI
========================================

init.d script automatically starts one instance of @@uwsgi_binary@@ for each
XML configuration file found in /etc/uwsgi/@@uwsgi_binary@@/.

This XML file must have '.xml' extension and, at least, following content:

    <uwsgi></uwsgi>

Example of more realistic configuration file:

    <uwsgi>
      <uid>1002</uid>
      <gid>1002</gid>
      <socket>/tmp/uwsgi.1002.sock</socket>
    </uwsgi>

For list of options passed by default to each started instance see
/etc/default/@@uwsgi_binary@@.

Service files of started uWSGI instance are located in directory named after
configuration file (without '.xml' extension):
  * UNIX socket | /var/run/uwsgi/@@uwsgi_binary@@/<confname>/socket
  * pidfile     | /var/run/uwsgi/@@uwsgi_binary@@/<confname>/pid

Owner, group and permissions of UNIX socket and pidfile
=======================================================

After starting of uWSGI instance init.d script tries to chown and/or chmod:
  * pidfile                    | chown root:root   | chmod 644
  * UNIX socket                |                   | chmod 660
  * directory with these files | chown <uid>:<gid> | chmod 755

If mentioned directory doesn't exist it will be created. Note that this
directory will be chowned/chmodded only if it was created by init.d script.

init.d script tries to parse XML configuration file for values of <uid> or
<gid> tag. If this tag didn't found, init.d tries to parse DAEMON_OPTS for
'--uid' or '--gid' option. If even this fails, then directory will be chowned
to root:root.

Chmodding of UNIX socket is made by using uWSGI option '--chmod-socket' in
DEFAULT_DAEMON_OPTS and DAEMON_OPTS. For value of these variables see
/etc/default/@@uwsgi_binary@@.

Commands recognized by init.d script
====================================

You can issue to init.d script following commands:
  * start        | starts daemon
  * stop         | stops daemon
  * reload       | sends to daemon SIGHUP signal
  * force-reload | sends to daemon SIGTERM signal
  * restart      | issues 'stop', then 'start' commands
  * status       | shows status of daemon instance (runned/not runned)

'status' command must be issued with exactly one argument: '<confname>'.

Controling specific instances of uWSGI
======================================

You could control specific instance(s) by issueing:

    /etc/init.d/@@uwsgi_binary@@ <command> <confname> <confname> ...

where:
  * <command> is one of 'start', 'stop' etc.
  * <confname> is the name of configuration file (without extension)

For example, this is how instance for /etc/uwsgi/@@uwsgi_binary@@/hello.xml is
started:

    /etc/init.d/@@uwsgi_binary@@ start hello

Status of executing init.d command for specific instance
========================================================

In init.d script output:
  * <confname>   -- command was executed without problems
  * <confname>!  -- command is failed (or executed with some problems)
  * <confname>?  -- configuration file for this instance isn't found
                    and this instance is ignored
  * (<confname>) -- instance is already in needed state

Let's see by example:

    /etc/init.d/@@uwsgi_binary@@ start ario wrogn googl moogl

Output:

    <...> -> (ario) wrogn? googl moogl!

It means that:
  * 'ario' instance was already runned before executing 'start' command
  * configuration file for 'wrogn' (i.e. file 'wrogn.xml') wasn't found
  * 'googl' is started without problems
  * starting 'moogl' is failed

Return value of init.d script is the number of instances with '!' mark.
