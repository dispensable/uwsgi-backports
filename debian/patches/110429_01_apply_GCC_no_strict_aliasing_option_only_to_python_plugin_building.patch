Description: Apply '-fno-strict-aliasing' CFLAG only for Python 2.x plugin
 '-fno-strict-aliasing' CFLAG is strictly required for Python 2.x plugin
 building, but can be omitted for other binaries/shared libraries.
Author: Leonid Borisenko <leo.borisenko@gmail.com>
Forwarded: no
Last-Update: 2011-05-01

Index: uwsgi/uwsgiconfig.py
===================================================================
--- uwsgi.orig/uwsgiconfig.py	2011-07-26 02:22:38.000000000 +0300
+++ uwsgi/uwsgiconfig.py	2011-07-26 02:25:31.000000000 +0300
@@ -30,6 +30,17 @@
 def binarize(name):
     return name.replace('/', '_').replace('.','_').replace('-','_')
 
+# add -fno-strict-aliasing only on python2 and gcc < 4.3
+def strict_aliasing_must_be_disabled(plugin_name, uconf):
+    is_python2_plugin = (
+        plugin_name.startswith('python2')
+        or (plugin_name == 'python' and sys.version_info[0] == 2))
+    gcc_version_earlier_than_43 = (
+        uconf.gcc_major < 4
+        or (uconf.gcc_major == 4 and uconf.gcc_minor < 3))
+    return (is_python2_plugin and gcc_version_earlier_than_43)
+
+
 def spcall(cmd):
     p = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE,stderr=open('/dev/null','w'))
 
@@ -140,6 +151,9 @@
                 p_cflags = cflags[:]
                 p_cflags += up.CFLAGS
 
+                if strict_aliasing_must_be_disabled(p, uc):
+                    p_cflags += ['-fno-strict-aliasing']
+
                 for cfile in up.GCC_LIST:
                     compile(' '.join(p_cflags),
                         path + '/' + cfile + '.o', path + '/' + cfile + '.c')
@@ -207,12 +221,9 @@
         except:
             print("*** you need a c compiler to build uWSGI ***")
             sys.exit(1)
-        gcc_major = int(gcc_version.split('.')[0])
-        gcc_minor = int(gcc_version.split('.')[1])
-        if (sys.version_info[0] == 2) or (gcc_major < 4) or (gcc_major == 4 and gcc_minor < 3):
-            self.cflags = self.cflags + ['-fno-strict-aliasing']
-        # add -fno-strict-aliasing only on python2 and gcc < 4.3
-        if gcc_major >= 4:
+        self.gcc_major = int(gcc_version.split('.')[0])
+        self.gcc_minor = int(gcc_version.split('.')[1])
+        if self.gcc_major >= 4:
             self.cflags = self.cflags + [ '-Wextra', '-Wno-unused-parameter', '-Wno-missing-field-initializers' ]
 
         self.ldflags = os.environ.get("LDFLAGS", "").split()
@@ -663,6 +674,9 @@
 
     p_cflags.insert(0, '-I.')
 
+    if strict_aliasing_must_be_disabled(up.NAME, uc):
+        p_cflags += ['-fno-strict-aliasing']
+
     if name is None:
         name = up.NAME
     else:
