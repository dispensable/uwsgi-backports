# This is shell script, (indirectly) sourced by uWSGI init.d script

# uWSGI handles several types of configuration files.
# This list contains extensions of configuration files recognized by uWSGI.
UWSGI_CONFFILE_TYPES="ini xml yaml yml"

# Regular expression matching any of extension of uWSGI configuration files.
#
# Made in format of basic regexp and looks like '\(ini\|xml\)': spaces are
# replaced with '\|' and whole expression is surrounded with '\(...\)'
UWSGI_CONFFILE_TYPES_REGEXP="$(\
  echo "$UWSGI_CONFFILE_TYPES" \
  | sed -e 's/ /\\|/g' -e 's/^\(.*\)$/\\(\1\\)/g' \
)"

# Echo name of uWSGI option for handling of configuration file with given
# extension.
conffile_option_name()
{
  case "$1" in
    ini)      echo ini       ;;
    xml)      echo xmlconfig ;;
    yaml|yml) echo yaml      ;;
  esac
}

# Given a configuration file name, look for it in uWSGI configuration
# directory.
#
# Echo full path to first found configuration file, which has given name and
# extension from list of known extensions of configuration files.
path_to_conffile_with_name()
{
  local CONFNAME="$@"
  local CONFFILE="${UWSGI_CONFDIR}/${CONFNAME}"
  local CONFFILE_PATH=""

  for CONFFILE_EXT in ${UWSGI_CONFFILE_TYPES}; do
    CONFFILE_PATH="${CONFFILE}.${CONFFILE_EXT}"
    if [ -e "$CONFFILE_PATH" ]; then break; fi
  done

  echo "$CONFFILE_PATH"
}

# Extract extension of configuration file from it's path/name.
type_of_conffile()
{
  # Configuration file name can contain newline character.
  #
  # So one's needed to process and return only last line from configuration
  # file name.
  echo "$@" | sed "\$s/^.*${UWSGI_CONFFILE_TYPES_REGEXP}\$/\1/g" | tail -1
}

# Get value of user-defined id (specifically, 'uid' or 'gid') for uWSGI
# process.
#
# It parses INI/XML/YAML configuration file with name $CONFNAME for value of
# first found "subsection" $KIND. "Subsection" may be:
# * assignment '$KIND =' in INI file
# * tag '<$KIND></$KIND>' in XML file
# * hash value '$KIND:' in YAML file
#
# If not found, parse $DAEMON_OPTS (defined in /etc/default/uwsgi),
# for value of '--$KIND' option.
#
# Echo found value or empty string if not found.
extract_id()
{
  local KIND="$1"
  shift
  local CONFNAME="$@"

  local CONFFILE="$(path_to_conffile_with_name "$CONFNAME")"
  local CONFTYPE="$(type_of_conffile "$CONFFILE")"

  local ID

  if [ "$CONFTYPE" = "ini" ]; then
    ID="$(
      grep --max-count=1 "^\s*${KIND}\s*=" "$CONFFILE" \
      | sed -e "s/^\s*${KIND}\s*=\s*\(.*\)\s*/\1/g"
    )"
  elif [ "$CONFTYPE" = "xml" ]; then
    ID="$(
      grep --max-count=1 "<${KIND}>.\+</${KIND}>" "$CONFFILE" \
      | sed -e "s/.*<${KIND}>\s*\(.*\)\s*<\/${KIND}>.*/\1/g"
    )"
  elif [ "$CONFTYPE" = "yaml" -o "$CONFTYPE" = "yml" ]; then
    ID="$(
      grep --max-count=1 "^\s\+${KIND}\s*:" "$CONFFILE" \
      | sed -e "s/^\s\+${KIND}\s*:\s*\(.*\)\s*/\1/g"
    )"
  fi

  if [ -z "$ID" ]; then
    ID="$(
      echo "$DAEMON_OPTS" \
      | sed -e "s/.*--${KIND}\s*\([^[:space:]]\+\).*/\1/g"
    )"
    if [ "$ID" = "$DAEMON_OPTS" ]; then ID=""; fi
  fi

  echo "$ID"
}

# Location of /var/run subdirectory for specific uWSGI process.
find_specific_rundir()
{
  local CONFNAME="$@"
  echo "${UWSGI_RUNDIR}/${CONFNAME}"
}

# Location of pidfile for specific uWSGI process.
find_specific_pidfile()
{
  local CONFNAME="$@"
  local SPECIFIC_RUNDIR="$(find_specific_rundir "$CONFNAME")"
  echo "${SPECIFIC_RUNDIR}/pid"
}

# Location of UNIX socket for specific uWSGI process.
find_specific_socket()
{
  local CONFNAME="$@"
  local SPECIFIC_RUNDIR="$(find_specific_rundir "$CONFNAME")"
  echo "${SPECIFIC_RUNDIR}/socket"
}

# Assigns owner, group and permissions to pidfile of uWSGI process.
chown_and_chmod_pidfile()
{
  local PIDFILE="$@"
  local INTERVAL_START="$(date +%s)"
  local INTERVAL_END="$(date +%s)"
  local WAITING=2 # seconds

  # Wait until daemon getting to create pidfile.
  while [ ! -e "$PIDFILE" ]; do
    INTERVAL_END="$(date +%s)"
    if [ "$(expr "$INTERVAL_END" - "$INTERVAL_START")" -gt "$WAITING" ]; then
      return
    fi
    sleep 0.05
  done

  chown root:root "$PIDFILE"
  chmod 644 "$PIDFILE"
}
